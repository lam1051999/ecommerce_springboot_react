name: shopdunk-clone
on:
  push:
    branches: [main]

jobs:
  build-project:
    runs-on: ubuntu-latest
    steps:
      # - name: checkout
      #   uses: actions/checkout@v2

      # - name: login dockerhub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # - name: setup docker buildx
      #   uses: docker/setup-buildx-action@v1
      #   id: buildx

      # - name: cache docker images layer
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      # - name: build and push docker image
      #   uses: docker/build-push-action@v2
      #   id: docker_build_backend
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     target: backend
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_BACKEND }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: verify build backend
      #   run: echo ${{ steps.docker_build_backend.outputs.digest }}

      # - name: build and push docker image
      #   uses: docker/build-push-action@v2
      #   id: docker_build_nginx
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     target: nginx
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NGINX }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: verify build nginx
      #   run: echo ${{ steps.docker_build_nginx.outputs.digest }}

      - name: ssh to ec2 instance and run commands
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}/ecommerce_springboot_react
            ls -al
